includeConfig 'conf/base.config'

params {
    
    //specify input
    //a folder with one or many vcf files. VCF files won't be splited
    vcf_in = "/lustre/scratch126/humgen/teams/hgi/users/vo3/vep_test/vcf1/"
    
    //or one big vcf file that will be splited into several chunks
    vcf_infile = "/lustre/scratch126/humgen/teams/hgi/users/vo3/vep_test/vcf1/chr1_156797149-156797468.sort.vcf.gz"
    split_input = 'true' // use 'true' to split one big VCF file
    number_of_chunks = 2  // specify the number of chunks if don't use bed file with intervals to split VCF
    use_bed_to_split='true' // use 'true' to split one big VCF file using intervals in bed file
    //interval_bed is used to split VCF if use_bed_to_split='true'
    interval_bed = "/lustre/scratch125/humgen/resources/exome/Homo_sapiens/Twist/Twist_Human_Core_Exome_BI-CTR.bed"

    //mandatory parameters
    ref_fasta = "/lustre/scratch125/humgen/resources/ref/Homo_sapiens/HS38DH/hs38DH.fa"
    vep_cmd="/lustre/scratch126/humgen/teams/hgi/users/vo3/vep_test/test/run_vep_original2.sh"
    workdir = "/lustre/scratch126/humgen/teams/hgi/users/vo3/work"
    publishdir = "/lustre/scratch126/humgen/teams/hgi/users/vo3/vep_test/output1/"

    custom_config_version      = 'master'
    custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    
}

// Load nf-core custom profiles from different Institutions
try {
    includeConfig "https://raw.githubusercontent.com/nf-core/configs/master/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: https://raw.githubusercontent.com/nf-core/configs/master/nfcore_custom.config")
}


def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

singularity {
  enabled = true
  cacheDir = '/nfs/hgi/singularityContainers/'
  runOptions = '--bind /lustre'
}
