process {

    // TODO nf-core: Check the defaults for all processes
    cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }
    memory = { check_max( 2.GB * task.attempt, 'memory' ) }
    time   = { check_max( 1.h  * task.attempt, 'time'   ) }

    errorStrategy = { task.attempt <= 3 ? 'retry' : 'finish' }
    maxRetries    = 3
    maxErrors     = '-1'

    // Process-specific resource requirements
    // NOTE - Please try and re-use the labels below as much as possible.
    //        These labels are used and recognised by default in DSL2 files hosted on nf-core/modules.
    //        If possible, it would be nice to keep the same label naming convention when
    //        adding in your local modules too.
    // TODO nf-core: Customise requirements for specific processes.
    // See https://www.nextflow.io/docs/latest/config.html#config-process-selectors

    withName: RUN_VEP {
        container = { '/software/hgi/containers/vep/vep_111.0.sif' }
        containerOptions = {'--bind /lustre/scratch125/humgen/resources/ensembl/vep/GRCh38/vep_data:/opt/vep/.vep \
            --bind /lustre/scratch125/humgen/resources/ensembl/vep/GRCh38/Plugins:/opt/vep/.vep/Plugins \
            --bind /lustre/scratch125/humgen/resources/gnomAD/release-2.1.1/exomes \
            --bind /lustre/scratch125/humgen/resources/cadd_scores/20201027-GRCh38_v1.6 \
            --bind /lustre/scratch125/humgen/resources/SpliceAI_data_files'}
        memory = { check_max( 20.GB * (task.attempt ** 1.5), 'memory' ) }
    }

    withName: SPLIT_VCF {
        memory = { check_max( 10.GB * (task.attempt ** 1.5), 'memory' ) }
    }

    withName: SPLIT_VCF_BED {
        memory = { check_max( 20.GB * (task.attempt ** 1.5), 'memory' ) }
    }

   
    withLabel:process_low {
        cpus   = { check_max( 2     * task.attempt, 'cpus'    ) }
        memory = { check_max( 1.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 1.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_medium {
        cpus   = { check_max( 4     * task.attempt, 'cpus'    ) }
        memory = { check_max( 4.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 2.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_high {
        cpus   = { check_max( 8    * task.attempt, 'cpus'    ) }
        memory = { check_max( 10.GB * task.attempt, 'memory' ) }
        time   = { check_max( 12.h  * task.attempt, 'time'   ) }
    }
    withLabel:process_long {
        time   = { check_max( 20.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_high_memory {
        memory = { check_max( 200.GB * task.attempt, 'memory' ) }
    }



    withLabel:error_ignore {
        errorStrategy = 'ignore'
    }
    withLabel:error_retry {
        errorStrategy = 'retry'
        maxRetries    = 2
    }

}
